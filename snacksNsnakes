import cv2
import mediapipe as mp
import pygame, random, time

mp_hands = mp.solutions.hands
hands = mp_hands.Hands(static_image_mode=False, max_num_hands=1, min_detection_confidence=0.5)

prev_x, prev_y = 0, 0

score = 0

display_width = 400
display_height = 300

pygame.init()
display = pygame.display.set_mode((display_width, display_height))

# FPS (frames per second) controller
fps = pygame.time.Clock()
pygame.display.update()
pygame.display.set_caption('Snake game by Suhani and Nidhi')

blue=(0,0,255)
red=(255,0,0)
black=(0,0,0)

snake_block = 10
snake_speed = 2
snake_position = [display_width/2, display_height/2]
snake_body = [[display_width/2, display_height/2]]
fruit_eaten = False

foodx = round(random.randrange(0, display_width - snake_block) / 10.0) * 10.0
foody = round(random.randrange(0, display_height - snake_block) / 10.0) * 10.0

game_over = False
direction = "UP"
changeTo = "UP"

def show_score(display):
    score_font = pygame.font.SysFont("Arial", 15)
    score_surface = score_font.render('Score : ' + str(score), True, "White")

    # create a rectangular object for the
    # text surface object
    score_rect = score_surface.get_rect()

    # displaying text
    display.blit(score_surface, score_rect)

def gameOver():
    font = pygame.font.SysFont('Arial', 50)

    game_over_dis = font.render("Your score is : " + str(score), True, red)

    game_over_rect = game_over_dis.get_rect()

    game_over_rect.midtop = (display_width / 2, display_height / 4)

    # blit will draw the text on screen
    display.blit(game_over_dis, game_over_rect)
    pygame.display.flip()

    # after 2 seconds we will quit the
    # program
    time.sleep(2)

    # deactivating pygame library
    pygame.quit()

    # quit the program
    quit()

def detect_finger_movement(frame):
    global prev_x, prev_y

    results = hands.process(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))

    if results.multi_hand_landmarks:
        hand_landmarks = results.multi_hand_landmarks[0]
        index_finger_tip = hand_landmarks.landmark[8]
        x, y = int(index_finger_tip.x * frame.shape[1]), int(index_finger_tip.y * frame.shape[0])

        cv2.circle(frame, (x, y), 10, (0, 255, 0), -1)
        cv2.putText(frame, f'Index finger tip: ({x}, {y})', (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)

        # Calculate movement direction
        dx = x - prev_x
        dy = y - prev_y

        if abs(dx) > abs(dy):
            movement_direction = "RIGHT" if dx < 0 else "LEFT"
        else:
            movement_direction = "UP" if dy < 0 else "DOWN"

        cv2.putText(frame, f'Movement direction: {movement_direction}', (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)

        # Update previous coordinates
        prev_x, prev_y = x, y
        return movement_direction
    return None

cap = cv2.VideoCapture(0)
last = "None"
while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    frame_with_direction = detect_finger_movement(frame)

    cv2.imshow('Finger Movement Direction', frame)

    if not last == frame_with_direction:
        last = frame_with_direction
    else:
        if not game_over:
            changeTo = last

            if changeTo == "UP" and direction != "DOWN":
                direction = "UP"
            if changeTo == "DOWN" and direction != "UP":
                direction = "DOWN"
            if changeTo == "LEFT" and direction != "RIGHT":
                direction = "LEFT"
            if changeTo == "RIGHT" and direction != "LEFT":
                direction = "RIGHT"

            if direction == "UP":
                snake_position[1] -= 10
            if direction == "DOWN":
                snake_position[1] += 10
            if direction == "LEFT":
                snake_position[0] -= 10
            if direction == "RIGHT":
                snake_position[0] += 10

            snake_body.insert(0, list(snake_position))

            if snake_position[0] == foodx and snake_position[1] == foody:
                score += 10
                fruit_eaten = True
            else:
                snake_body.pop()

            if fruit_eaten:
                foodx = round(random.randrange(0, display_width - snake_block) / 10.0) * 10.0
                foody = round(random.randrange(0, display_height - snake_block) / 10.0) * 10.0
                fruit_eaten = False

            display.fill(black)

            # Draws the snake
            for part in snake_body:
                pygame.draw.rect(display, blue, pygame.Rect(
                    part[0], part[1], 10, 10))

            # Draws the food
            pygame.draw.rect(display, red, [foodx, foody, snake_block, snake_block])

            if snake_position[0] < 0 or snake_position[0] > display_width - 10:
                game_over = True
            if snake_position[1] < 0 or snake_position[1] > display_height - 10:
                game_over = True

            for block in snake_body[1:]:
                if snake_position[0] == block[0] and snake_position[1] == block[1]:
                    game_over = True

            show_score(display)
            pygame.display.update()
            fps.tick(snake_speed)
        else:
            gameOver()


    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
